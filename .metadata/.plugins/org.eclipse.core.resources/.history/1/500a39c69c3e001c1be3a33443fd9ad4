/**
  ******************************************************************************
  * @file
  * @author
  * @brief
  ******************************************************************************
  */

/* Includes ------------------------------------------------------------------*/
#include "API_delay.h"

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/

/* Private function prototypes -----------------------------------------------*/
void delayInit( delay_t * delay, tick_t duration ){
	delay->duration = duration;
}

bool_t delayRead( delay_t * delay ){
	if(delay->running){
		delay.running = true;
		delay->startTime = HAL_GetTick();
	}
	return ((HAL_GetTick() - delay->startTime) >= delay->duration) ? true : false;
}

void delayWrite( delay_t * delay, tick_t duration ){
	delay->duration = duration;
}

/* Private functions ---------------------------------------------------------*/





/**
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */

