/**
  ******************************************************************************
  * @file	API_led_handler.c
  * @author AV
  * @brief	Implementacion administrador de leds
  ******************************************************************************
  */

/* Includes ------------------------------------------------------------------*/

#include "API_led_handler.h"
#include "API_delay.h"

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/

#define LED_NUMBER 3

/* Private macro -------------------------------------------------------------*/

/* Private variables ---------------------------------------------------------*/

/*Declaracion de las estructuras de delays para leds*/
static delay_t delayLED1;
static delay_t delayLED2;
static delay_t delayLED3;

/*Arreglos con la info para cada LED*/
static Led_TypeDef boardLeds[LED_NUMBER] = {LED1,
											LED2,
											LED3};

static delay_t* delayLeds[LED_NUMBER] = {&delayLED1,
										 &delayLED2,
										 &delayLED3};

/* Private function prototypes -----------------------------------------------*/

/* Global functions *---------------------------------------------------------*/

void initLeds(void){
	/* Initialize BSP Leds*/
	BSP_LED_Init(LED1);
	BSP_LED_Init(LED2);
	BSP_LED_Init(LED3);

	for(uint8_t currentLed = 0; currentLed < LED_NUMBER; currentLed++){
		delayInit(delayLeds[currentLed], 500);
	}
}

void ledUpdate(void){
	for(uint8_t currentLed = 0; currentLed < LED_NUMBER; currentLed++){
		if(delayRead(delayLeds[currentLed])){
			BSP_LED_Toggle(boardLeds[currentLed]);
		}
	}
}

void ledModifyDuration(uint8_t ledNumber, uint32_t duration){
	delayWrite(delayLeds[ledNumber], duration);
}
/* Private functions ---------------------------------------------------------*/





/**
  * @brief
  * @param  None
  * @retval None
  */

