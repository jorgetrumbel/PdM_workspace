/**
  ******************************************************************************
  * @file	API_delay.c
  * @author AV
  * @brief	Implementacion de funcionces de anti rebote
  ******************************************************************************
  */

/* Includes ------------------------------------------------------------------*/

#include "API_debounce.h"
#include "API_delay.h"

#include "stm32f4xx_hal.h"  		/* <- HAL include */
#include "stm32f4xx_nucleo_144.h" 	/* <- BSP include */

/* Private typedef -----------------------------------------------------------*/

// Tipo de datos enumerado llamado estadoMEF_t
typedef enum{
    BUTTON_UP,
	BUTTON_FALLING,
	BUTTON_DOWN,
	BUTTON_RISING
} debounce_t;

/* Private define ------------------------------------------------------------*/

#define DEBOUNCE_DELAY 40

/* Private macro -------------------------------------------------------------*/

/* Private variables ---------------------------------------------------------*/

// Variable de estado
static debounce_t estadoActual;

/*Declaracion de las estructuras de delays para leds*/
static delay_t delayDebounce;

/* Private function prototypes -----------------------------------------------*/

/**
  * @brief  Funcion que se realiza cuando se presiona el boton
  */
void buttonPressed(void);

/**
  * @brief  Funcion que se realiza cuando se libera el boton
  */
void buttonReleased(void);

/* Global functions *---------------------------------------------------------*/

bool_t debounceInit(void){
	estadoActual = BUTTON_UP;

	/* Initialize BSP Leds*/
	BSP_LED_Init(LED1);
	BSP_LED_Init(LED2);
	BSP_LED_Init(LED3);

	/* Initialize BSP PB for BUTTON_USER */
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);

	delayInit(&delayDebounce, DEBOUNCE_DELAY);

	return true;
}


void debounceUpdate(void){
	switch(estadoActual){
		case BUTTON_UP:{
			if(BSP_PB_GetState(BUTTON_USER)){
				delayRead(&delayDebounce);
				estadoActual = BUTTON_RISING;
			}
			break;
		}
		case BUTTON_RISING:{
			if(delayRead(&delayDebounce)){
				if(!BSP_PB_GetState(BUTTON_USER)){
					estadoActual = BUTTON_UP;
				}
				else{
					estadoActual = BUTTON_DOWN;
					buttonPressed();
				}
			}
			break;
		}
		case BUTTON_FALLING:{
			if(delayRead(&delayDebounce)){
				if(BSP_PB_GetState(BUTTON_USER)){
					estadoActual = BUTTON_DOWN;
				}
				else{
					estadoActual = BUTTON_UP;
					buttonReleased();
				}
			}
			break;
		}
		case BUTTON_DOWN:{
			if(!BSP_PB_GetState(BUTTON_USER)){
				delayRead(&delayDebounce);
				estadoActual = BUTTON_FALLING;
			}
			break;
		}
		default:{
			debounceInit();
			break;
		}
	}
}
/* Private functions ---------------------------------------------------------*/

void buttonPressed(void){
	BSP_LED_toggle(LED1);
}

void buttonReleased(void){
	BSP_LED_toggle(LED2);
}



/**
  * @brief
  * @param  None
  * @retval None
  */

